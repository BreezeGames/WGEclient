{"version":3,"sources":["wgecore.js"],"names":["Buffer","gl","data","type","drawType","STATIC_DRAW","Uttils","debug","_data","_type","_drawType","_buffer","createBuffer","bindBuffer","bufferData","Float32Array","err","Error","IS_DEBUG","VERTEX_SHADER","FRAGMENT_SHADER","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","STREAM_DRAW","DYNAMIC_DRAW","LINK_STATUS","FLOAT","TRIANGLE_STRIP","Render","canvas","width","height","_canvas","_ctx","getContext","e","_renderScene","_isFullScreen","scene","viewport","r","g","b","a","clearColor","getParameter","COLOR_CLEAR_VALUE","depth","clr","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","clear","update","draw","x","y","yes","canvasW","canvasH","window","innerWidth","innerHeight","Scene","parseShader","xml","xmlType","shader","querySelector","console","info","textContent","Shader","shaderXml","_shaderText","_shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","Program","vertex","fragment","_gl","_program","createProgram","attachShader","linkProgram","getProgramParameter","name","getAttribLocation","useProgram","string","log"],"mappings":"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","file":"wgecore.js","sourcesContent":["\"use strict\";\n/**\n * Created by jorgen on 25.09.16.\n */\n/* Buffer incapsulation class */\n/* version: 1.0               */\n\nclass Buffer {\n    constructor(gl, data, type, drawType = STATIC_DRAW) {\n        Uttils.debug(\"[Buffer constructor]: Constructing buffer\");\n\n        try {\n            this._data = data;\n            this._type = type;\n            this._drawType = drawType;\n            this.gl = gl;\n\n            this._buffer = gl.createBuffer();\n            this.gl.bindBuffer(this._type, this._buffer);\n            this.gl.bufferData(this._type, new Float32Array(this._data), this._drawType);\n        } catch(err) {\n            throw new Error(`[Buffer constructor] error: ${err}`);\n        }\n    }\n\n    get data() {\n        return this._data;\n    }\n\n    bind() {\n        this.gl.bindBuffer(this._type, this._buffer);\n    }\n}\n\"use strict\";\n\n/**\n * Created by jorgen on 24.09.16.\n */\n/* WGEngine definitions */\n\nvar IS_DEBUG = true;\n\nvar VERTEX_SHADER           = 0x8B31,\n    FRAGMENT_SHADER         = 0x8B30;\n\n\nvar ARRAY_BUFFER            = 0x8892,\n    ELEMENT_ARRAY_BUFFER    = 0x8893;\n\nvar STREAM_DRAW             = 0x88E0,\n    STATIC_DRAW             = 0x88E4,\n    DYNAMIC_DRAW            = 0x88E8;\n\nvar LINK_STATUS             = 0x8B82;\n\nvar FLOAT                   = 0x1406;\n\nvar TRIANGLE_STRIP          = 0x0005;\n'use strict';\r\n\r\n\r\nclass Render {\r\n\r\n    constructor(canvas, width, height) {\r\n        if (!canvas) {\r\n            throw new Error(\"[Render constructor]: wrong canvas element\");\r\n        }\r\n\r\n        this._canvas = canvas;\r\n\r\n        Uttils.debug(\"[Render constructor]: initializing webGL context\");\r\n        this._ctx = null;\r\n        try {\r\n            this._ctx =\r\n                this._canvas.getContext('webgl') ||\r\n                this._canvas.getContext('experemental-webgl');\r\n        } catch (e) {\r\n        }\r\n\r\n        if (!this._ctx) {\r\n            throw new Error(\"[Render constructor]: webgl not supported!\");\r\n        }\r\n\r\n        if (width) {\r\n            this._canvas.width = width;\r\n        }\r\n        if (height) {\r\n            this._canvas.height = height;\r\n        }\r\n\r\n        this._renderScene = null;\r\n        this._isFullScreen = false;\r\n    }\r\n\r\n    setRenderScene(scene) {\r\n        if (scene) {\r\n            this._renderScene = scene;\r\n        }\r\n    }\r\n\r\n    width(width) {\r\n        if (width) {\r\n            this._canvas.width = width;\r\n            this.viewport(0, 0, this.width(), this.height());\r\n        } else {\r\n            return this._canvas.width;\r\n        }\r\n    }\r\n\r\n    height(height) {\r\n        if (height) {\r\n            this._canvas.height = height;\r\n            this.viewport(0, 0, this.width(), this.height());\r\n        } else {\r\n            return this._canvas.height;\r\n        }\r\n    }\r\n\r\n    getCanvas() {\r\n        return this._canvas;\r\n    };\r\n\r\n    getContext() {\r\n        return this._ctx;\r\n    };\r\n\r\n    clearColor(r, g, b, a) {\r\n        if (r) {\r\n            this._ctx.clearColor(r, g, b, a);\r\n        } else {\r\n            return this._ctx.getParameter(this._ctx.COLOR_CLEAR_VALUE);\r\n        }\r\n    };\r\n\r\n    clearScreen(depth) {\r\n        let clr = this._ctx.COLOR_BUFFER_BIT;\r\n        clr |= depth ? this._ctx.DEPTH_BUFFER_BIT : 0;\r\n\r\n        this._ctx.clear(clr);\r\n    }\r\n\r\n    draw() {\r\n        if (this._renderScene) {\r\n            this._renderScene.update();\r\n            this._renderScene.draw();\r\n        }\r\n    }\r\n\r\n    viewport(x, y, width, height) {\r\n        this._ctx.viewport(x, y, width, height);\r\n    }\r\n\r\n    setFullScreen(yes) {\r\n        if (this._isFullScreen == yes) return;\r\n\r\n        if (yes) {\r\n            this.canvasW = this.width();\r\n            this.canvasH = this.height();\r\n            this._isFullScreen = true;\r\n            this.viewport(0, 0, window.innerWidth, window.innerHeight);\r\n            this.width(window.innerWidth);\r\n            this.height(window.innerHeight);\r\n        } else {\r\n            this._isFullScreen = false;\r\n            this.width(this.canvasW);\r\n            this.height(this.canvasH);\r\n            this.viewport(0, 0, this.width(), this.height());\r\n        }\r\n    }\r\n}\n\"use strict\";\n/**\n * Created by jorgen on 25.09.16.\n */\n/* Renderer scene interface */\n/* version: 0.1 */\n\nclass Scene {\n    constructor() {\n\n    }\n\n    init() {\n        throw new Error(\"Init method not implemented\");\n    }\n\n    draw() {\n        throw new Error(\"Draw method not implemented\");\n    }\n\n    update() {\n        throw new Error(\"Update method not implemented\");\n    }\n}\n\"use strict\";\n\n/**\n * Created by jorgen on 24.09.16.\n */\n/* WGEngine shaders */\n/* version: 1.1 */\n\n\nfunction parseShader(xml, type) {\n    let xmlType = null;\n    switch(type) {\n        case VERTEX_SHADER:\n            xmlType = \"vertex\";\n            break;\n        case FRAGMENT_SHADER:\n            xmlType = \"fragment\";\n            break;\n        default:\n            throw new Error(\"Appropriate shader type\");\n    }\n\n    let shader = xml.querySelector(`shader[type=\"${xmlType}\"]`);\n    console.info(shader);\n    if (!shader) {\n        throw new Error(`Can't find shader resource of type ${xmlType}`);\n    }\n\n    return shader.textContent;\n}\n\nclass Shader {\n    /**********************************\n     * Create shader from XML file\n     * @param gl WebGL context\n     * @param shaderXml XML shader object\n     * @param type Shader type. Can be gl.VERTEX_SHADER or gl.FRAGMENT_SHADER\n     * @constructor\n     */\n    constructor(gl, shaderXml, type) {\n        Uttils.debug(`[Shader constructor]: creating shader`);\n\n        this._shaderText = null;\n        this._shader = null;\n        this._type = type;\n\n        this._shaderText = parseShader(shaderXml);\n        this._shader = gl.createShader(this._type);\n        gl.shaderSource(this._shader, this._shaderText);\n        gl.compileShader(this._shader);\n\n        if (!gl.getShaderParameter(this._shader, gl.COMPILE_STATUS)) {\n            let info = gl.getShaderInfoLog(this._shader);\n            throw new Error(`shader compile error \\n ${info}`);\n        }\n\n    }\n\n    get shader(){\n        return this._shader;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n}\n/*\n    Program class\n    version: 1.0\n */\nclass Program {\n    constructor(gl, vertex, fragment) {\n        this._gl = gl;\n        this._program = gl.createProgram();\n\n        if (vertex) {\n            gl.attachShader(this._program, vertex.shader());\n        }\n        if (fragment) {\n            gl.attachShader(this._program, fragment.shader());\n        }\n\n        gl.linkProgram(this._program);\n\n        if (!gl.getProgramParameter(this._program, LINK_STATUS)) {\n            throw new Error(\"[Program constructor] linking error\");\n        }\n    }\n\n    get program() {\n        return this._program;\n    }\n\n    getAttribute(name) {\n        return this._gl.getAttribLocation(this._program, name);\n    }\n\n    use() {\n        this._gl.useProgram(this._program);\n    }\n}\n'use strict';\n\nclass Uttils {\n    static debug(string) {\n        if (IS_DEBUG) {\n            console.log(string);\n        }\n    }\n}\n\n"]}